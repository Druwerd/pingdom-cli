#!/usr/bin/python

import os
import re
import sys
import pingdom
import json
from optparse import OptionParser

# Default Pingdom credentials
PINGDOM_USERNAME = 'username'
PINGDOM_PASSWORD = 'password'
PINGDOM_APPKEY = 'appkey'

# JSON file with Pingdom credentials
PINGDOM_AUTHFILE = 'auth.json'


def auth():
    if os.path.exists(PINGDOM_AUTHFILE):
        auth_data = json.loads(open(PINGDOM_AUTHFILE).read())
        PINGDOM_USERNAME = auth_data['PINGDOM_USERNAME']
        PINGDOM_PASSWORD = auth_data['PINGDOM_PASSWORD']
        PINGDOM_APPKEY = auth_data['PINGDOM_APPKEY']
    return pingdom.Pingdom(username=PINGDOM_USERNAME, password=PINGDOM_PASSWORD, appkey=PINGDOM_APPKEY)


def validate_id(ident):
    ident = str(ident)
    matchObj = re.match(r"^\d+$", ident)

    if matchObj:
        return True
    else:
        print "Invalid id: %s" % ident
        return False


def usage():
    print "usage: %s COMMAND SITE_NAME [PARAMS]" % sys.argv[0]

def add_site_check(site_name,params=""):
    matchObj = re.match(r"^[\w.]+$", site_name)

    default_params = {"name": site_name,
                      "host": site_name,
                      "type": "http",
                      "resolution": 1,
                      "sendtoemail": True,
                      "sendtosms": True,
                      "sendnotificationwhendown": 5}

    if matchObj:
        print "Adding %s" % site_name
        res = pingdom_connection.method(url="checks", method="POST", parameters=default_params)
        print res
    else:
        print "Invalid site name: %s" % site_name


def delete_check(check_id):
    check_id = str(check_id)

    if validate_id(check_id):
        print "Deleting check %s" % check_id
        res = pingdom_connection.method(url="checks/" + check_id, method="DELETE")
        print res


def delete_site_check(site_name):
    check = pingdom_connection.check_by_name(site_name)
    check_id = check[0]['id']
    delete_check(check_id)


def check_info(check_id):
    check_id = str(check_id)

    if validate_id(check_id):
        res = pingdom_connection.method(url="checks/" + check_id, method="GET")
        print json.dumps(res, sort_keys=True, indent=4)


def get_site_check_info(site_name):
    check = pingdom_connection.check_by_name(site_name)
    check_id = check[0]['id']
    check_info(check_id)


def modify_check(check_id,params=None):
    check_id = str(check_id)
    if params != None:
        params = json.loads(str(params))
    
    if validate_id(check_id):
        res = pingdom_connection.method(url="checks/" + check_id, method="PUT", parameters=params)
        print res


def modify_site_check(site_name, params=None):
    check = pingdom_connection.check_by_name(site_name)
    check_id = check[0]['id']
    modify_check(check_id,params)


if (len(sys.argv) >= 3):
    pingdom_connection = auth()
    command = sys.argv[1]
    site_name = sys.argv[2]
    params = None
    if len(sys.argv) == 4:
        params = sys.argv[3]
        
    if command == 'add':
        add_site_check(site_name)
    elif command == 'delete':
        delete_site_check(site_name)
    elif command == 'info':
        get_site_check_info(site_name)
    elif command == 'modify':
        modify_site_check(site_name,params)
    else:
        usage()
else:
    usage()
