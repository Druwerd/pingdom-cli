#!/usr/bin/python

import os
import re
import sys
import pingdom
import json
from optparse import OptionParser

# Default Pingdom credentials
PINGDOM_USERNAME = 'username'
PINGDOM_PASSWORD = 'password'
PINGDOM_APPKEY = 'appkey'

# JSON file with Pingdom credentials
PINGDOM_AUTHFILE = 'auth.json'


def auth():
    global PINGDOM_USERNAME
    global PINGDOM_PASSWORD
    global PINGDOM_APPKEY
    if os.path.exists(PINGDOM_AUTHFILE):
        auth_data = json.loads(open(PINGDOM_AUTHFILE).read())
        PINGDOM_USERNAME = auth_data['PINGDOM_USERNAME']
        PINGDOM_PASSWORD = auth_data['PINGDOM_PASSWORD']
        PINGDOM_APPKEY = auth_data['PINGDOM_APPKEY']
    try:
        return pingdom.Pingdom(username=PINGDOM_USERNAME, password=PINGDOM_PASSWORD, appkey=PINGDOM_APPKEY)
    except Exception, err:
        print err
        sys.exit()


def validate_id(ident):
    ident = str(ident)
    matchObj = re.match(r"^\d+$", ident)

    if matchObj:
        return True
    else:
        print "Invalid id: %s" % ident
        return False


def get_check_id(name):
    try:
        check = pingdom_connection.check_by_name(name)
    except Exception, err:
        print err
        sys.exit()

    if len(check) != 0:
        return check[0]['id']
    else:
        print "%s check not found" % name
        return None


def usage():
    print "usage: %s COMMAND SITE_NAME [PARAMS]" % sys.argv[0]


def list_check_names():
    try:
        checks = pingdom_connection.method("checks", "GET")
    except Exception, err:
        print err
        sys.exit()

    for check in checks['checks']:
        print check['name']


def list_check_ids():
    try:
        checks = pingdom_connection.method("checks", "GET")
    except Exception, err:
        print err
        sys.exit()

    for check in checks['checks']:
        print check['id']


def add_site_check(site_name, params=""):
    matchObj = re.match(r"^[\w.]+$", site_name)

    #TODO: overide default params with params passed in
    default_params = {"name": site_name,
                      "host": site_name,
                      "type": "http",
                      "resolution": 1,
                      "sendtoemail": True,
                      "sendtosms": True,
                      "sendnotificationwhendown": 5}

    if matchObj:
        print "Adding %s" % site_name
        try:
            res = pingdom_connection.method(url="checks", method="POST", parameters=default_params)
            print res
        except Exception, err:
            print err
            sys.exit()
    else:
        print "Invalid site name: %s" % site_name


def delete_check(check_id):
    check_id = str(check_id)

    if validate_id(check_id):
        print "Deleting check %s" % check_id
        try:
            res = pingdom_connection.method(url="checks/" + check_id, method="DELETE")
            print res
        except Exception, err:
            print err
            sys.exit()


def delete_site_check(site_name):
    check_id = get_check_id(site_name)
    if check_id != None:
        delete_check(check_id)


def check_info(check_id):
    check_id = str(check_id)

    if validate_id(check_id):
        try:
            res = pingdom_connection.method(url="checks/" + check_id, method="GET")
            print json.dumps(res, sort_keys=True, indent=4)
        except Exception, err:
            print err
            sys.exit()


def get_site_check_info(site_name):
    check_id = get_check_id(site_name)
    if check_id != None:
        check_info(check_id)


def modify_check(check_id, params=None):
    check_id = str(check_id)
    if params != None:
        try:
            params = json.loads(str(params))
        except ValueError, err:
            print str(err) + ": %s" % params
            sys.exit()

    if validate_id(check_id):
        try:
            res = pingdom_connection.method(url="checks/" + check_id, method="PUT", parameters=params)
            print res
        except Exception, err:
            print err
            sys.exit()


def modify_site_check(site_name, params=None):
    check_id = get_check_id(site_name)
    if check_id != None:
        modify_check(check_id, params)


if (len(sys.argv) >= 2):
    pingdom_connection = auth()
    command = sys.argv[1]
    site_name = None
    params = None

    if len(sys.argv) == 3:
        site_name = sys.argv[2]
    if len(sys.argv) == 4:
        params = sys.argv[3]

    if command == 'add':
        add_site_check(site_name)
    elif command == 'delete':
        delete_site_check(site_name)
    elif command == 'info':
        get_site_check_info(site_name)
    elif command == 'modify':
        modify_site_check(site_name, params)
    elif command == 'listnames':
        list_check_names()
    elif command == 'listids':
        list_check_ids()
    else:
        usage()
else:
    usage()
